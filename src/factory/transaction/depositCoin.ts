import { IAction as IAuthorizeDepositCointAccountAction } from '../action/authorize/deposit/account/coin';
import * as MoneyTransferActionFactory from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import OrganizationType from '../organizationType';
import { AccountGoodType, IAccount } from '../ownershipInfo';
import PersonType from '../personType';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

/**
 * 取引開始パラメーターインターフェース
 */
export type IStartParams = TransactionFactory.IStartParams<TransactionType.DepositCoin, IAgent, IRecipient, IObject>;
export interface IRecipient {
    typeOf: OrganizationType | PersonType;
    id?: string;
    name: string;
    url?: string;
}
export interface IAgent {
    typeOf: OrganizationType | PersonType;
    id?: string;
    name: string;
    url?: string;
}
export type IResult = any;
/**
 * エラーインターフェース
 */
export type IError = any;
/**
 * 入金先のロケーションインターフェース
 */
export type ILocation = IAccount<AccountGoodType.CoinAccount>;
export type IAuthorizeAction = IAuthorizeDepositCointAccountAction;
/**
 * 取引対象物インターフェース
 */
export interface IObject {
    amount: number;
    toLocation: ILocation;
    notes: string;
    authorizeActions: IAuthorizeAction[];
}
export interface IPotentialActions {
    moneyTransfer: MoneyTransferActionFactory.IAttributes;
}
/**
 * コイン入金取引属性インターフェース
 */
export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}
/**
 * コイン入金取引インターフェース
 */
export type ITransaction = IExtendId<IAttributes>;
